// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String     @id @default(cuid())
    name          String?
    email         String?    @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    Customer      Customer[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Customer {
    id      String    @id @default(cuid())
    user_id String
    user    User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
    address String
    Invoice Invoice[]
}

model Product {
    id          Int           @id
    name        String
    description String
    price       Decimal       @db.Decimal(10, 2)
    created_at  DateTime      @default(now())
    InvoiceItem InvoiceItem[]
}

enum InvoiceStatus {
    PENDING
    COMPLETE
}

model Invoice {
    id           Int           @id
    customer_id  String
    customer     Customer      @relation(fields: [customer_id], references: [id], onDelete: Cascade)
    total_amount Decimal       @db.Decimal(10, 2)
    created_at   DateTime      @default(now())
    status       InvoiceStatus
    InvoiceItem  InvoiceItem[]
}

model InvoiceItem {
    id         Int      @id
    invoice_id Int
    invoice    Invoice  @relation(fields: [invoice_id], references: [id], onDelete: Cascade)
    product_id Int
    product    Product  @relation(fields: [product_id], references: [id], onDelete: Cascade)
    quantity   Int
    unit_price Decimal  @db.Decimal(10, 2)
    created_at DateTime @default(now())
}
